1.
MATCH (hugo:Person {name: "Hugo Weaving"})-[:ACTED_IN]->(hugoWeavingMovies) RETURN hugo,hugoWeavingMovies

2.
MATCH (hugo:Person {name: "Hugo Weaving"})-[:ACTED_IN]->(hugoWeavingMovies) <-[:DIRECTED]-(directors) RETURN directors

3.
MATCH (people:Person)-[:ACTED_IN]->(m) RETURN people, count(*)

4.
MATCH (people:Person)-[:ACTED_IN]->(m) RETURN people, count(*)

5.
MATCH (people:Person)-[:WROTE]->(m)<-[:DIRECTED]-(directed) where directed=people RETURN people

6.
MATCH (hugo:Person {name: "Hugo Weaving"})-[:ACTED_IN]->(m)<- [:ACTED_IN]-(keanu:Person {name: "Keanu Reeves"}) RETURN m

7.
CREATE (CaptainAmericaFirst:Movie {title: 'Captain America: The First Avenger', released:2011, tagline:'The first Avenger'})
CREATE (ChrisEvans:Person {name: 'Chris Evans', born:1981})
CREATE (Samuel:Person {name: 'Samuel L. Jackson', born:1948})
CREATE (ChristopherMarkus:Person {name: 'Christopher Markus', born:1970})
CREATE (JoeJohnston:Person {name: 'Joe Johnston', born:1950})
CREATE (StephenMcFeely:Person {name: 'Stephen McFeely', born:1970})
CREATE
  (ChrisEvans)-[:ACTED_IN {roles:['Captain America']}]->(CaptainAmericaFirst),
  (HugoWeaving:Person {name: 'Hugo Weaving'})-[:ACTED_IN {roles:['Red Skull']}]->(CaptainAmericaFirst),
  (Samuel)-[:ACTED_IN {roles:['Nick Fury']}]->(CaptainAmericaFirst),
  (StephenMcFeely)-[:WROTE]->(CaptainAmericaFirst),
  (ChristopherMarkus)-[:WROTE]->(CaptainAmericaFirst),
  (JoeJohnston)-[:DIRECTED]->(CaptainAmericaFirst)

MATCH (people:Person)-[related]-(m:Movie {title: "Captain America: The First Avenger"}) RETURN m, people, related

8.
MATCH (start:town {name: "Darjeeling"})-[*1..10]-(Sandakphu) return distinct Sandakphu

9.
MATCH path = ShortestPath((start:town {name: "Darjeeling"})-[*]-(meta:peak{name: "Sandakphu"})) return path

10.
MATCH path = ShortestPath((start:town {name: "Darjeeling"})-[*]-(meta:peak{name: "Sandakphu"})) where ALL (winterpath in rels(path) Where winterpath.winter = "true") return path

11.
MATCH path = ((start:town {name: "Darjeeling"})-[*1..6]-(meta:peak{name: "Sandakphu"})) return path, reduce(addDistance=0,path1 IN relationships(path)|addDistance +path1.distance) as final order by final asc

12.
MATCH (start:town {name: "Darjeeling"})-[path1:twowheeler]->(locations) where path1.summer="True" return path1
BRAK WYNIKOW (no changes, no records)
13.
MATCH (start:town {name: "Darjeeling"})-[path1:twowheeler]->(locations) where path1.summer="True" return locations
BRAK WYNIKOW (no changes, no records)
14.
MATCH path = ()-[o:ORIGIN]->(a:Airport) RETURN a, COUNT(o) AS flights ORDER BY flights ASC

relacje:

MATCH (start:Airport)<-[:ORIGIN]-(flight:Flight)-[:DESTINATION]->(stop:Airport), (flight)<-[:ASSIGN]-(ticket:Ticket)
WITH start, stop, flight, min(ticket.price) as minPrice
MATCH (flight)<-[:ASSIGN]-(t:Ticket {price: minPrice})
WITH start, stop, flight, t
CREATE (start)-[cheapFlight:CHEAPEST_FLIGHT {price: t.price, class:t.class, date: flight.date, duration: flight.duration, distance: flight.distance, airline:flight.airline}]->(stop)
RETURN cheapFlight;

15.
MATCH airport=(stop:Airport)<-[cheapFlight:CHEAPEST_FLIGHT*1..6]-(start:Airport {name: "LAX"}), ()-[origin:ORIGIN]->(start:Airport ) WITH airport,stop, reduce(totalPrice=0, rel IN relationships(airport)|totalPrice + rel.price) as cost WHERE cost < 3000  return distinct stop

16.
MATCH airport = (stop:Airport{name: "DAY"})<-[cheapFlight:CHEAPEST_FLIGHT*1..10]-(start:Airport {name: "LAX"}), (stop:Airport)<-[:DESTINATION]-(), ()-[:ORIGIN]->(stop:Airport) return airport,reduce(totalPrice=0, rel IN relationships(airport)|totalPrice + rel.price)  as cost ORDER BY cost DESC


17.
MATCH airport = (stop:Airport{name: "DAY"})<-[cheapFlight:CHEAPEST_FLIGHT*1..10]-(start:Airport {name: "LAX"}), (stop:Airport)<-[:DESTINATION]-(), ()-[:ORIGIN]->(start:Airport ) WITH airport, cheapFlight, reduce(totalPrice=0, rel IN relationships(airport)|totalPrice + rel.price) as cost RETURN airport, cost ORDER BY cost LIMIT 1


MATCH (stop1:Airport)<-[:ORIGIN]-(f:Flight)-[:DESTINATION]->(start1:Airport), (f)<-[:ASSIGN]-(t:Ticket)
WITH stop1, start1, f, t  WHERE t.class = "business"
CREATE (stop1)-[bf:BUSINESS_FLIGHT {price: t.price, class:t.class, date: f.date, duration: f.duration, distance: f.distance, airline:f.airline}]->(stop1)
RETURN bf;

18.
MATCH airport=(airportStp:Airport{name: "DAY"})<-[businessFlight:BUSINESS_FLIGHT*1..10]-(airportStrt:Airport {name: "LAX"}), (airportStp:Airport)<-[:DESTINATION]-(), ()-[:ORIGIN]->(airportStrt:Airport) WITH airport,  reduce(totalDis=0, rel IN relationships(airport)|totalDis + rel.price) as cost RETURN airport, cost ORDER BY cost LIMIT 1
BRAK WYNIKOW (no changes, no records)


19.
MATCH airport=(stop1:Airport)<-[cheapFlight:CHEAPEST_FLIGHT]-(start1:Airport) WITH cheapFlight, stop1.name + start1.name as special RETURN  cheapFlight.airline as flight,  count(DISTINCT special) AS number ORDER BY number DESC

20.
MATCH airport=(airportStp:Airport)<-[:CHEAPEST_FLIGHT]-(airportStrt:Airport)<-[:CHEAPEST_FLIGHT]-(airportThird:Airport)  WITH airport, reduce(totalPrice=0, rel IN relationships(airport)|totalPrice + rel.price) as cost WHERE airportStp<>airportThird  RETURN airport, cost ORDER BY cost LIMIT 1